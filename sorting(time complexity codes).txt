                                                               BUBBLE SORT 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        int[] arr = new int[1000000];
        Random r = new Random();
        for(int i=0;i<arr.length;i++)
            arr[i] = r.nextInt(1000000);
        //System.out.println("Before Sorting : "+Arrays.toString(arr));
        long startTime = System.nanoTime();

        for(int j=0;j<arr.length-1;j++) {
            for (int i = 0; i < arr.length - 1; i++) {
                if (arr[i] > arr[i + 1]) {
                    int temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                }
            }
            //System.out.println("Iteration : "+(j+1)+" "+Arrays.toString(arr));
        }
        long endTime = System.nanoTime();
        long  duration = endTime -startTime;
        System.out.println("Execution Time : "+duration+ " nanoseconds");
       // System.out.println("After Sorting : "+Arrays.toString(arr));

    }
}


                                                                     SELECTION SORT 
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] arr = new int[1000000];
        Random r = new Random();
        
        for (int i = 0; i < arr.length; i++) {
            arr[i] = r.nextInt(1000000);
        }
        
        long startTime = System.nanoTime();
        
        for (int i = 0; i < arr.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
        
        long endTime = System.nanoTime();
        System.out.println("Selection Sort Execution Time: " + (endTime - startTime) + " nanoseconds");
    }
}
                                                                      
                                                                           INSERTION SORT 
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] arr = new int[1000000];
        Random r = new Random();
        
        for (int i = 0; i < arr.length; i++) {
            arr[i] = r.nextInt(1000000);
        }
        
        long startTime = System.nanoTime();
        
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
        
        long endTime = System.nanoTime();
        System.out.println("Insertion Sort Execution Time: " + (endTime - startTime) + " nanoseconds");
    }
}
                                                                  MERGE SORT
package sort;
import java.util.*;

public class sorts {
    public static void main(String[] args) {
        int[] arr = new int[10];
        Random r = new Random(1000000);
        
        for (int i = 0; i < arr.length; i++) {
            arr[i] = r.nextInt(1000000);
        }
        
        long startTime = System.nanoTime();
        
        mergeSort(arr, 0, arr.length - 1);
        
        long endTime = System.nanoTime();
        System.out.println("Merge Sort Execution Time: " + (endTime - startTime) + " nanoseconds");
    }
    
    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }
    
    public static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];
        
        for (int i = 0; i < n1; i++)
            leftArr[i] = arr[left + i];
        for (int j = 0; j < n2; j++)
            rightArr[j] = arr[mid + 1 + j];
        
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }
        
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }
        
        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }
}
                                                                 QUICK SORT 
package sort;
import java.util.*;

public class sorts {
    public static void main(String[] args) {
        int[] arr = new int[1000000];
        Random r = new Random();
        
        for (int i = 0; i < arr.length; i++) {
            arr[i] = r.nextInt(1000000);
        }
        
        long startTime = System.nanoTime();
        
        quickSort(arr, 0, arr.length - 1);
        
        long endTime = System.nanoTime();
        System.out.println("Quick Sort Execution Time: " + (endTime - startTime) + " nanoseconds");
    }
    
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }
    
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}

